events {}

http {
    upstream session-auth-server {
        server ats-session-auth-server:8000;
    }

    upstream test-server-spring {
        server ats-test-server-spring:8900;
    }

    server {
        listen 8080;

        location /api {
            set $allowed_origin '';
            if ($http_origin ~* (http://localhost:8080|http://192.168.64.2:8080)) {
                set $allowed_origin $http_origin;
            }

            # Global CORS settings
            add_header 'Access-Control-Allow-Origin' $allowed_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;

            # Handle preflight requests globally
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $allowed_origin always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain';
                return 204;
            }
        }

        location /auth {
            internal;
            proxy_pass http://session-auth-server/api/session/v1/auth/get-role;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Host $host;
            proxy_set_header Cookie $http_cookie;
        }

        location @error401 {
             return 302 /login;
        }

        location /api/session {
            proxy_pass http://session-auth-server/api/session;

            proxy_set_header Host $host;  # Forward the original Host header
            proxy_set_header X-Real-IP $remote_addr;  # Forward the original client's IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward client's IP addresses
            proxy_set_header X-Forwarded-Proto $scheme;  # Forward the original request scheme (http or https)
            proxy_set_header X-Forwarded-Port $server_port;  # Forward the original port
            proxy_set_header Cookie $http_cookie;
        }

        location /api/test-server-spring {
            auth_request /auth;
            auth_request_set $auth_status $upstream_status;
            auth_request_set $user_roles $upstream_http_x_roles;
            proxy_set_header X-Roles $user_roles;

            proxy_pass http://test-server-spring/api/test-server-spring;

            proxy_set_header Host $host;  # Forward the original Host header
            proxy_set_header X-Real-IP $remote_addr;  # Forward the original client's IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward client's IP addresses
            proxy_set_header X-Forwarded-Proto $scheme;  # Forward the original request scheme (http or https)
            proxy_set_header X-Forwarded-Port $server_port;  # Forward the original port
        }

        location /api/session-auth-server/swagger-ui {
            proxy_pass http://session-auth-server/api/session/swagger-ui;

            proxy_set_header Host $host;  # Forward the original Host header
            proxy_set_header X-Real-IP $remote_addr;  # Forward the original client's IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward client's IP addresses
            proxy_set_header X-Forwarded-Proto $scheme;  # Forward the original request scheme (http or https)
            proxy_set_header X-Forwarded-Port $server_port;  # Forward the original port
        }

        location /api/session-auth-server/v3/api-docs {
            proxy_pass http://session-auth-server/api/session/v3/api-docs;

            proxy_set_header Host $host;  # Forward the original Host header
            proxy_set_header X-Real-IP $remote_addr;  # Forward the original client's IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward client's IP addresses
            proxy_set_header X-Forwarded-Proto $scheme;  # Forward the original request scheme (http or https)
            proxy_set_header X-Forwarded-Port $server_port;  # Forward the original port
        }

        location /api/test-server-spring/swagger-ui {
            proxy_pass http://test-server-spring/api/test-server-spring/swagger-ui;

            proxy_set_header Host $host;  # Forward the original Host header
            proxy_set_header X-Real-IP $remote_addr;  # Forward the original client's IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward client's IP addresses
            proxy_set_header X-Forwarded-Proto $scheme;  # Forward the original request scheme (http or https)
            proxy_set_header X-Forwarded-Port $server_port;  # Forward the original port
        }

        location /api/test-server-spring/v3/api-docs {
            proxy_pass http://test-server-spring/api/test-server-spring/v3/api-docs;

            proxy_set_header Host $host;  # Forward the original Host header
            proxy_set_header X-Real-IP $remote_addr;  # Forward the original client's IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward client's IP addresses
            proxy_set_header X-Forwarded-Proto $scheme;  # Forward the original request scheme (http or https)
            proxy_set_header X-Forwarded-Port $server_port;  # Forward the original port
        }

        server_tokens off;
    }
}
